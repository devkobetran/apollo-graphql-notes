"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[7570],{7028:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=s(4848),t=s(8453);const a={sidebar_position:4},r="Mutations",o={id:"tutorial/Mutations",title:"Mutations",description:"What is a mutation?",source:"@site/docs/tutorial/Mutations.md",sourceDirName:"tutorial",slug:"/tutorial/Mutations",permalink:"/apollo-graphql-notes/docs/tutorial/Mutations",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/apollo-graphql-notes/docs/tutorial/Mutations.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Arguments",permalink:"/apollo-graphql-notes/docs/tutorial/Arguments"},next:{title:"Federation from Day One",permalink:"/apollo-graphql-notes/docs/tutorial/Federation"}},c={},l=[{value:"What is a mutation?",id:"what-is-a-mutation",level:2},{value:"Schema Syntax",id:"schema-syntax",level:2},{value:"Modifying multiple objects",id:"modifying-multiple-objects",level:2},{value:"Mutations vs Queries",id:"mutations-vs-queries",level:4},{value:"Adding a mutation to our schema",id:"adding-a-mutation-to-our-schema",level:2},{value:"Updating our schema",id:"updating-our-schema",level:3},{value:"Code Challenge",id:"code-challenge",level:4},{value:"Updating our TrackAPI data source",id:"updating-our-trackapi-data-source",level:2},{value:"Updating the data source",id:"updating-the-data-source",level:3},{value:"Resolving a mutation successfully",id:"resolving-a-mutation-successfully",level:2},{value:"Mutation resolvers",id:"mutation-resolvers",level:3},{value:"Fulfilling the schema requirements",id:"fulfilling-the-schema-requirements",level:3},{value:"Spaceship &amp; Mission Example",id:"spaceship--mission-example",level:4},{value:"Resolving a mutation with errors",id:"resolving-a-mutation-with-errors",level:2},{value:"Handling the error case",id:"handling-the-error-case",level:3},{value:"Testing a Mutation in the Explorer",id:"testing-a-mutation-in-the-explorer",level:2},{value:"Building a GraphQL mutation",id:"building-a-graphql-mutation",level:3},{value:"The useMutation hook",id:"the-usemutation-hook",level:2},{value:"Mutation in client-land",id:"mutation-in-client-land",level:3},{value:"The <code>useMutation</code> hook",id:"the-usemutation-hook-1",level:3},{value:"Setting up the <code>onClick</code>",id:"setting-up-the-onclick",level:3},{value:"Sending a mutation client-side",id:"sending-a-mutation-client-side",level:4},{value:"<code>useQuery</code> vs <code>useMutation</code> hooks",id:"usequery-vs-usemutation-hooks",level:4},{value:"Console loading",id:"console-loading",level:3},{value:"Example",id:"example",level:4},{value:"Our mutation in the browser",id:"our-mutation-in-the-browser",level:2},{value:"Apollo Client Cache",id:"apollo-client-cache",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mutations",children:"Mutations"})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-mutation",children:"What is a mutation?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.strong,{children:"mutation"})," is a write operation in GraphQL."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"Mutation"})," type serves as an entry point to our schema."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"schema-syntax",children:"Schema Syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type Mutation {\n    addSpacecat(name: String!): Spacecat\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsx)(n.p,{children:"Start the operation name with a varb like add, delete, or create."}),(0,i.jsxs)(n.p,{children:["Examples: ",(0,i.jsx)(n.code,{children:"createMission"}),", ",(0,i.jsx)(n.code,{children:"deleteMission"})]})]}),"\n",(0,i.jsx)(n.h2,{id:"modifying-multiple-objects",children:"Modifying multiple objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type Spacecat{\n    id: ID!\n    name: String!\n    missions:[Mission]\n}\n\ntype Mission {\n    id: ID!\n    codename: String!\n    crewMembers: [Spacecat]\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Example: create a mutation called ",(0,i.jsx)(n.code,{children:"assignMission"})," which will return a type of both ",(0,i.jsx)(n.code,{children:"Spacecat"})," and ",(0,i.jsx)(n.code,{children:"Mission"})]}),"\n",(0,i.jsxs)(n.li,{children:["Include 3 fields to all mutation responses:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"code"}),": an ",(0,i.jsx)(n.code,{children:"Int"})," that refers to the status of the response, similar to an HTTP status code."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"success"}),": a ",(0,i.jsx)(n.code,{children:"Boolean"})," flag that indicates whether all the updates the mutation was responsible for succeeded."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"message"}),": a ",(0,i.jsx)(n.code,{children:"String"})," to display information about the result of the mutation on the client side. This is particularly useful if the mutation was only partially successful and a generic error message can't tell the whole story."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"We need to create a separate object for a mutation's return type because:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The return type can contain partial errors and partial successful data"}),"\n",(0,i.jsx)(n.li,{children:"When the mutation modifies multiple objects, it can return all of those objects"}),"\n"]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Here is the new type created for the ",(0,i.jsx)(n.code,{children:"assignMission"})," mutation:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type AssignMissionResponse{\n    code: Int!\n    Success: Boolean!\n    message: String!\n    spacecat: Spacecat\n    mission: Mission\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"mutations-vs-queries",children:"Mutations vs Queries"}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Queries and mutations are both types of GraphQL operations."}),"\n",(0,i.jsx)(n.li,{children:"Queries are read operations that always retrieve data."}),"\n",(0,i.jsx)(n.li,{children:"Mutations are write operations that always modify data."}),"\n",(0,i.jsxs)(n.li,{children:["Similar to ",(0,i.jsx)(n.code,{children:"Query"})," fields, fields of the ",(0,i.jsx)(n.code,{children:"Mutation"})," type are also entry points into a GraphQL API."]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-mutation-to-our-schema",children:"Adding a mutation to our schema"}),"\n",(0,i.jsx)(n.h3,{id:"updating-our-schema",children:"Updating our schema"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Example of a mutation that needs to know which track to update."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"incrementTrackViews(id: ID!)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Return type for the above mutation response"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'type IncrementTrackViewsResponse {\n    "Similar to HTTP status code, represents the status of the mutation"\n    code: Int!\n    "Indicates whether the mutation was successful"\n    success: Boolean!\n    "Human-readable message for the UI"\n    message: String!\n    "Newly updated track after a successful mutation"\n    track: Track\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["In the mutation response type (",(0,i.jsx)(n.code,{children:"IncrementTrackViewsResponse"}),") above, the modified object's return type is nullable (",(0,i.jsx)(n.code,{children:"track: Track"}),") because the mutation might encounter errors that prevent a ",(0,i.jsx)(n.code,{children:"Track"})," from being modified."]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"server/src/schema.ts"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type Mutation {\n  incrementTrackViews(id: ID!): IncrementTrackViewsResponse!\n}\n"})}),"\n",(0,i.jsx)(n.h4,{id:"code-challenge",children:"Code Challenge"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const typeDefs = gql`\n  # write your mutation here\n  type Mutation {\n    assignSpaceship(spaceshipId: ID!, missionId: ID!): AssignSpaceshipResponse!\n  }\n\n  # write your mutation return type here\n  type AssignSpaceshipResponse {\n    code: Int!\n    success: Boolean!\n    message: String!\n    spaceship: Spaceship\n    mission: Mission\n  }\n\n  type Mission{ \n    ...\n  }\n\n  type Spaceship{\n    ...\n  }\n`;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"updating-our-trackapi-data-source",children:"Updating our TrackAPI data source"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part4/04-updating-our-trackapi-data-source",children:"Updating our TrackAPI data source"})}),"\n",(0,i.jsx)(n.h3,{id:"updating-the-data-source",children:"Updating the data source"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Why is a separate ",(0,i.jsx)(n.code,{children:"RESTDataSource"})," class used to handle data retrieval?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"To keep data-fetching implementations in a dedicate class and keep resolvers simple and clean."}),"\n",(0,i.jsx)(n.li,{children:"It automatically handles resource caching and request deduplication for our REST API calls."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"server/src/datasources/track-api.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"incrementTrackViews(trackId: string) {\n  return this.patch<TrackModel>(`track/${trackId}/numberOfViews`);\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["We need to make an HTTP ",(0,i.jsx)(n.code,{children:"PATCH"})," request by calling ",(0,i.jsx)(n.code,{children:"this.patch"})," which is provided to us by the ",(0,i.jsx)(n.code,{children:"RESTDataSource"})," class we inherited from."]}),"\n",(0,i.jsx)(n.li,{children:"Inside the parentheses, we give it the endpoint."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"resolving-a-mutation-successfully",children:"Resolving a mutation successfully"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part4/05-resolving-a-mutation-successfully",children:"Resolving a mutation successfully"})}),"\n",(0,i.jsx)(n.h3,{id:"mutation-resolvers",children:"Mutation resolvers"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Template:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const resolvers: Resolvers = {\n  Query: {\n    // ... query resolvers\n  },\n  Mutation: {\n    // where our new resolver function will go\n    // increments a track's numberOfViews property\n    incrementTrackViews: (parent, args, contextValue, info) => {},\n  },\n};\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.p,{children:["In the structure of the ",(0,i.jsx)(n.code,{children:"resolvers"})," object:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Resolver function names must match the field name in the schema."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"Query"})," and ",(0,i.jsx)(n.code,{children:"Mutation"})," types in the schema should have corresponding keys in the ",(0,i.jsx)(n.code,{children:"resolvers"})," object."]}),"\n"]})]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"dataSources.trackAPI.incrementTrackViews(id);\n"})}),(0,i.jsxs)(n.p,{children:["Why can't this resolver immediately return the results of the ",(0,i.jsx)(n.code,{children:"TrackAPI"})," call in this case?"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It builds part of the response from the REST operation status."}),"\n",(0,i.jsxs)(n.li,{children:["The schema is also expecting ",(0,i.jsx)(n.code,{children:"code"}),", ",(0,i.jsx)(n.code,{children:"success"}),", ",(0,i.jsx)(n.code,{children:"message"})," fields."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"fulfilling-the-schema-requirements",children:"Fulfilling the schema requirements"}),"\n",(0,i.jsx)(n.h4,{id:"spaceship--mission-example",children:"Spaceship & Mission Example"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add a resolver for the new ",(0,i.jsx)(n.code,{children:"assignSpaceship"})," mutation provided in the schema, using arrow function syntax."]}),"\n",(0,i.jsxs)(n.li,{children:["Use the ",(0,i.jsx)(n.code,{children:"dataSources.spaceAPI"})," class and its method ",(0,i.jsx)(n.code,{children:"assignSpaceshipToMission"}),", which takes the ",(0,i.jsx)(n.code,{children:"spaceshipId"})," and the ",(0,i.jsx)(n.code,{children:"missionId"})," as arguments (in that order)"]}),"\n",(0,i.jsxs)(n.li,{children:["This method returns an object with the newly updated ",(0,i.jsx)(n.code,{children:"spaceship"})," and ",(0,i.jsx)(n.code,{children:"mission"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Follow the schema requirements to return an object for the successful result."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"code"})," should be ",(0,i.jsx)(n.code,{children:"200"}),", success should be ",(0,i.jsx)(n.code,{children:"true"})," and ",(0,i.jsx)(n.code,{children:"message"})," should say ",(0,i.jsx)(n.code,{children:"Successfully assigned spaceship ${spaceshipId} to mission ${missionId}"})]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import type { Resolvers } from "./__generated__/index";\nimport { gql } from "graphql-tag";\n\nconst typeDefs = gql`\n  type Mutation {\n    assignSpaceship(spaceshipId: ID!, missionId: ID!): AssignSpaceshipResponse\n  }\n\n  type AssignSpaceshipResponse {\n    code: Int!\n    success: Boolean!\n    message: String!\n    spaceship: Spaceship\n    mission: Mission\n  }\n`;\n\nconst resolvers: Resolvers = {\n  Mutation: {\n    assignSpaceship: async (_, { spaceshipId, missionId }, { dataSources }) => {\n      const { spaceship, mission } =\n        await dataSources.spaceAPI.assignSpaceshipToMission(\n          spaceshipId,\n          missionId\n        );\n      return {\n        code: 200,\n        success: true,\n        message: `Successfully assigned spaceship ${spaceshipId} to mission ${missionId}`,\n        spaceship: spaceship,\n        mission: mission,\n      };\n    },\n  },\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"resolving-a-mutation-with-errors",children:"Resolving a mutation with errors"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part4/06-resolving-a-mutation-with-errors",children:"Resolving a mutation with errors"})}),"\n",(0,i.jsx)(n.h3,{id:"handling-the-error-case",children:"Handling the error case"}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Instead of hardcoding the error code as 404, be dynamic by using the value that Apollo Server and the RESTDataSource class provides."}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"extensions"})," field to the error contains relevant error details such as a ",(0,i.jsx)(n.code,{children:"response"})," property and the ",(0,i.jsx)(n.code,{children:"status"})," property which outputs the status code."]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"code: err.extensions.response.status;\n"})}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For the ",(0,i.jsx)(n.code,{children:"message"})," property, be dynamic by returning different types of error messages using:"]}),"\n"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"message: err.extensions.response.body;\n"})})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"incrementTrackViews"})," resolver with error handling:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"incrementTrackViews: async (_, {id}, {dataSources}) => {\n  try {\n    const track = await dataSources.trackAPI.incrementTrackViews(id);\n    return {\n      code: 200,\n      success: true,\n      message: `Successfully incremented number of views for track ${id}`,\n      track\n    };\n  } catch (err) {\n    return {\n      code: err.extensions.response.status,\n      success: false,\n      message: err.extensions.response.body,\n      track: null\n    };\n  }\n},\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"incrementTrackViews"})," resolver above handles both a successful response and possible errors."]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Both objects fulfill the requirements of the schema."}),"\n",(0,i.jsxs)(n.li,{children:["Only the successful response contains ",(0,i.jsx)(n.code,{children:"track"})," data."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"testing-a-mutation-in-the-explorer",children:"Testing a Mutation in the Explorer"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part4/07-testing-a-mutation-in-the-explorer",children:"Testing a Mutation in the Explorer"})}),"\n",(0,i.jsx)(n.h3,{id:"building-a-graphql-mutation",children:"Building a GraphQL mutation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When writing a GraphQL mutation, use the ",(0,i.jsx)(n.code,{children:"mutation"})," keyword and immediately following after the keyword should be the operation name."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"mutation IncrementTrackViews($incrementTrackViewsId: ID!){\n  incrementTrackViews(id: $incrementTrackViewsId)\n}\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In the successful mutation response, the values of ",(0,i.jsx)(n.code,{children:"code"}),", ",(0,i.jsx)(n.code,{children:"success"}),", and ",(0,i.jsx)(n.code,{children:"message"})," come from the ",(0,i.jsx)(n.code,{children:"incrementTrackViews"})," resolver."]}),"\n",(0,i.jsxs)(n.li,{children:["When the mutation fails, the values of ",(0,i.jsx)(n.code,{children:"code"})," and ",(0,i.jsx)(n.code,{children:"message"})," come from the ",(0,i.jsx)(n.code,{children:"error.extensions.response"})," property in the mutation's resolver."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-usemutation-hook",children:"The useMutation hook"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part4/08-the-usemutation-hook",children:"The useMutation hook"})}),"\n",(0,i.jsx)(n.h3,{id:"mutation-in-client-land",children:"Mutation in client-land"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"/**\n * Mutation to increment a track's number of views\n */\nconst INCREMENT_TRACK_VIEWS = gql(`\n  mutation IncrementTrackViews($incrementTrackViewsId: ID!) {\n    incrementTrackViews(id: $incrementTrackViewsId) {\n      code\n      success\n      message\n      track {\n        id\n        numberOfViews\n      }\n    }\n  }\n`);\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"the-usemutation-hook-1",children:["The ",(0,i.jsx)(n.code,{children:"useMutation"})," hook"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"useMutation"})," does not execute the mutation automatically."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"useMutation"})," hook returns an array with two elements:","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The first element is the ",(0,i.jsx)(n.strong,{children:"mutate function"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The second element is an object with information about the mutation: ",(0,i.jsx)(n.code,{children:"loading"}),", ",(0,i.jsx)(n.code,{children:"error"}),", and ",(0,i.jsx)(n.code,{children:"data"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"setting-up-the-onclick",children:["Setting up the ",(0,i.jsx)(n.code,{children:"onClick"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"<CardContainer\n  to={`/track/${id}`}\n  onClick={() => incrementTrackViews()}\n>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"sending-a-mutation-client-side",children:"Sending a mutation client-side"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"We use hooks to send requests to our GraphQL API from a React client."}),"\n",(0,i.jsxs)(n.li,{children:["TO send a mutation, we use the ",(0,i.jsx)(n.code,{children:"useMutation"})," hook."]}),"\n",(0,i.jsx)(n.li,{children:"This returns an array, where the first element is the mutate function used to trigger the mutation."}),"\n",(0,i.jsxs)(n.li,{children:["The second element is an object with more information about the mutation, such as ",(0,i.jsx)(n.code,{children:"loading"}),", ",(0,i.jsx)(n.code,{children:"error"}),", and ",(0,i.jsx)(n.code,{children:"data"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"This hook takes in a GraphQL operation as the first parameter."}),"\n",(0,i.jsxs)(n.li,{children:["It also takes in an ",(0,i.jsx)(n.code,{children:"options"})," object as the second parameter, where properties like ",(0,i.jsx)(n.code,{children:"variables"})," are set."]}),"\n"]})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.h4,{id:"usequery-vs-usemutation-hooks",children:[(0,i.jsx)(n.code,{children:"useQuery"})," vs ",(0,i.jsx)(n.code,{children:"useMutation"})," hooks"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"useQuery"})," hook is used to send queries, whereas the ",(0,i.jsx)(n.code,{children:"useMutation"})," hook is used to send mutations."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"useQuery"})," hook runs automatically on component render, whereas the ",(0,i.jsx)(n.code,{children:"useMutation"})," hook returns a mutation function needed to trigger the mutation."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"useQuery"})," hook returns an object, whereas the ",(0,i.jsx)(n.code,{children:"useMutation"})," hook returns an array."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h3,{id:"console-loading",children:"Console loading"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const [incrementTrackViews] = useMutation(INCREMENT_TRACK_VIEWS, {\n  variables: { incrementTrackViewsId: id },\n  // to observe what the mutation response returns\n  onCompleted: (data) => {\n    console.log(data);\n  },\n});\n"})}),"\n",(0,i.jsx)(n.h4,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use the useMutation hook to send the ",(0,i.jsx)(n.code,{children:"ASSIGN_SPACESHIP_MUTATION"})," mutation to the server."]}),"\n",(0,i.jsxs)(n.li,{children:["It takes 2 variables:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"spaceshipId"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"missionId"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Destructure the mutate function (call it ",(0,i.jsx)(n.code,{children:"assignSpaceship"}),"), as well as the ",(0,i.jsx)(n.code,{children:"loading"}),", ",(0,i.jsx)(n.code,{children:"error"})," and ",(0,i.jsx)(n.code,{children:"data"})," properties from the return array of the hook."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { useMutation } from "@apollo/client";\nimport { gql } from "./__generated__/index";\n\nconst ASSIGN_SPACESHIP_MUTATION = gql(`\n  mutation AssignSpaceshipToMissionMutation($spaceshipId: ID!, $missionId: ID!) {\n    assignSpaceship(spaceshipId: $spaceshipId, missionId: $missionId) {\n      code\n      success\n      message\n      spaceship {\n        name\n      }\n      mission {\n        codename\n      }\n    }\n  }\n`);\n\nconst spaceshipId = "ROCKET_X";\nconst missionId = "M0007";\n\nconst [assignSpaceship, { data, loading, error }] = useMutation(\n  ASSIGN_SPACESHIP_MUTATION,\n  { variables: { spaceshipId, missionId } }\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"our-mutation-in-the-browser",children:"Our mutation in the browser"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part4/09-our-mutation-in-the-browser",children:"Our mutation in the browser"})}),"\n",(0,i.jsx)(n.h3,{id:"apollo-client-cache",children:"Apollo Client Cache"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["How do we see the number of views for a track update while we are on the page?","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The value is first loaded from cache, then updates when the mutation response comes back successfully."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);