"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[4785],{2495:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>h,contentTitle:()=>t,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var s=n(4848),i=n(8453);const a={sidebar_position:5},t="Federation from Day One",o={id:"tutorial/Federation",title:"Federation from Day One",description:"Intro to Federation",source:"@site/docs/tutorial/Federation.md",sourceDirName:"tutorial",slug:"/tutorial/Federation",permalink:"/apollo-graphql-notes/docs/tutorial/Federation",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/apollo-graphql-notes/docs/tutorial/Federation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Mutations",permalink:"/apollo-graphql-notes/docs/tutorial/Mutations"}},h={},l=[{value:"Intro to Federation",id:"intro-to-federation",level:2},{value:"Overview",id:"overview",level:3},{value:"Life before Apollo Federation",id:"life-before-apollo-federation",level:3},{value:"The structure of a supergraph",id:"the-structure-of-a-supergraph",level:3},{value:"Subgraphs",id:"subgraphs",level:3},{value:"The router",id:"the-router",level:3},{value:"Why use Apollo Federation?",id:"why-use-apollo-federation",level:3},{value:"Project setup",id:"project-setup",level:2},{value:"Agreeing on a schema",id:"agreeing-on-a-schema",level:2},{value:"Practice",id:"practice",level:4},{value:"Building out the subgraphs",id:"building-out-the-subgraphs",level:2},{value:"Practice",id:"practice-1",level:4},{value:"Managed Federation &amp; the supergraph",id:"managed-federation--the-supergraph",level:2},{value:"Managed Federation process",id:"managed-federation-process",level:4},{value:"Publishing the Subgraphs with Rover",id:"publishing-the-subgraphs-with-rover",level:2},{value:"Supergraph",id:"supergraph",level:4},{value:"How the Router resolves data",id:"how-the-router-resolves-data",level:2},{value:"Router configuration and Uplink",id:"router-configuration-and-uplink",level:2},{value:"What information does the Query Plan Preview in GraphOS Studio include?",id:"what-information-does-the-query-plan-preview-in-graphos-studio-include",level:4},{value:"Connecting data using entities",id:"connecting-data-using-entities",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"federation-from-day-one",children:"Federation from Day One"})}),"\n",(0,s.jsx)(r.h2,{id:"intro-to-federation",children:"Intro to Federation"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/01-intro-to-federation",children:"Intro to Federation"})}),"\n",(0,s.jsx)(r.h3,{id:"overview",children:"Overview"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Apollo Federation"})," is an architecture for creating modular graphs.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Your graph is built in smaller pieces that all work together."}),"\n",(0,s.jsx)(r.li,{children:"The supergraph improves the developer experience for teams, making it easier to scale your product."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"life-before-apollo-federation",children:"Life before Apollo Federation"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:'"supergraph" and "federated graph" mean the same thing: your graph\'s functionality is divided across smaller, modular graphs.'}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"the-structure-of-a-supergraph",children:"The structure of a supergraph"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["A supergraph has two key pieces:","\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"One or more subgraphs"}),"\n",(0,s.jsx)(r.li,{children:"A router"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"subgraphs",children:"Subgraphs"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["In a supergraph, your schema is built in smaller parts.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Each part of the schema is owned by a separate subgraph."}),"\n",(0,s.jsxs)(r.li,{children:["A ",(0,s.jsx)(r.strong,{children:"subgraph"})," is a standalone GraphQL server with its own schema file, resolvers, and data sources."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"the-router",children:"The router"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["A supergraph architecture also includes the ",(0,s.jsx)(r.strong,{children:"router"}),", which sits between clients and the subgraphs.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The router is responsible for accepting incoming operations from clients and splitting them into smaller operations that can each be resolved by a single subgraph."}),"\n",(0,s.jsx)(r.li,{children:"The router does this work with the help of the supergraph schema."}),"\n",(0,s.jsx)(r.li,{children:"The supergraph schema is composed of all the fields and types from each subgraph schema."}),"\n",(0,s.jsx)(r.li,{children:"The supergraph schema is a bit like a map, helping the router determine which subgraph can resolve each field in an operation."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"why-use-apollo-federation",children:"Why use Apollo Federation?"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Core principles of ",(0,s.jsx)(r.strong,{children:"Apollo Federation"}),": the separation of concerns."]}),"\n",(0,s.jsxs)(r.li,{children:["By splitting up our schema into subgraphs, backend teams can work on their own subgraphs independently, without impacting developers working on other subgraphs.","\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"And since each subgraph is a separate server, teams have the flexibility to choose the language, infrastructure, and policies that work best for them."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.admonition,{type:"info",children:[(0,s.jsx)(r.p,{children:"Benefits of Apollo Federation:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"A smoother developer experience among teams, because there are clearer boundaries of responsibility for different parts of the graph."}),"\n",(0,s.jsx)(r.li,{children:"Flexibility in subgraph configuration, which means subgraphs can have different numbers of instances, security protocols, or caching strategies."}),"\n"]})]}),"\n",(0,s.jsx)(r.h2,{id:"project-setup",children:"Project setup"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/02-project-setup",children:"Project setup"})}),"\n",(0,s.jsx)(r.h2,{id:"agreeing-on-a-schema",children:"Agreeing on a schema"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/03-agreeing-on-a-schema",children:"Agreeing on a schema"})}),"\n",(0,s.jsx)(r.h4,{id:"practice",children:"Practice"}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Subgraph Schemas:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Subgraph schemas help divide a graph's surface area according to different concerns."}),"\n",(0,s.jsx)(r.li,{children:"To decide how to split your schema into multiple subgraphs, you can group types and fields related to similar concerns."}),"\n",(0,s.jsx)(r.li,{children:"A subgraph schema should contain the types and fields it is responsible for populating."}),"\n"]})]}),"\n",(0,s.jsx)(r.h2,{id:"building-out-the-subgraphs",children:"Building out the subgraphs"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/04-building-out-the-subgraphs",children:"Building out the subgraphs"})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["The ",(0,s.jsx)(r.code,{children:"buildSubgraphSchema"})," function takes an object containing ",(0,s.jsx)(r.code,{children:"typeDefs"})," and ",(0,s.jsx)(r.code,{children:"resolvers"})," and returns a federation-ready subgraph schema."]}),"\n",(0,s.jsx)(r.li,{children:"This schema includes a number of federation directives and types that enable our subgraph to take full advantage of the power of federation."}),"\n"]})}),"\n",(0,s.jsx)(r.h4,{id:"practice-1",children:"Practice"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["To make an ",(0,s.jsx)(r.code,{children:"ApolloServer"})," instance a subgraph, we install a package called ",(0,s.jsx)(r.code,{children:"@apollo/subgraph"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["From that package, we use a function called ",(0,s.jsx)(r.code,{children:"buildSubgraphSchema"}),", which accepts an object containing ",(0,s.jsx)(r.code,{children:"typeDefs"})," and ",(0,s.jsx)(r.code,{children:"resolvers"}),", and returns a federation-ready subgraph schema."]}),"\n",(0,s.jsxs)(r.li,{children:["We add this to the ",(0,s.jsx)(r.code,{children:"ApolloServer"})," configuration object using the ",(0,s.jsx)(r.code,{children:"schema"})," property."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"managed-federation--the-supergraph",children:"Managed Federation & the supergraph"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/05-managed-federation-and-the-supergraph",children:"Managed Federation & the supergraph"})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["When the schema registry gets a new or updated version of a subgraph schema, it starts a process called ",(0,s.jsx)(r.strong,{children:"composition"}),"."]}),"\n",(0,s.jsx)(r.li,{children:"The schema registry attempts to combine all of the schemas from the registered subgraphs into a single supergraph schema."}),"\n",(0,s.jsx)(r.li,{children:"If composition succeeds and there are no validation errors, the schema registry produces a supergraph schema."}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"managed-federation-process",children:"Managed Federation process"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Every supergraph includes 1 or more subgraphs, each of which has its own schema."}),"\n",(0,s.jsx)(r.li,{children:"With managed federation, each of these schemas is published to the Apollo schema registry."}),"\n",(0,s.jsx)(r.li,{children:"Whenever a subgraph schema is published, the schema registry triggers a process called composition."}),"\n",(0,s.jsx)(r.li,{children:"If successful, this process results in the creation of a supergraph schema, which is then fetched by the supergraph's router via periodic polling."}),"\n"]}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"After creating or updating a subgraph schema, developers use the Rover CLI to publish the subgraph schema to the Apollo schema registry."}),"\n",(0,s.jsx)(r.li,{children:"The Apollo schema registry composes the subgraph schemas into a supergraph schema, which the router uses to resolve incoming client requests."}),"\n",(0,s.jsx)(r.li,{children:"With managed federation, schema updates to the router are managed by GraphOS and happen with zero downtime."}),"\n"]})}),"\n",(0,s.jsx)(r.h2,{id:"publishing-the-subgraphs-with-rover",children:"Publishing the Subgraphs with Rover"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/06-publishing-the-subgraphs-with-rover",children:"Publishing the Subgraphs with Rover"})}),"\n",(0,s.jsx)(r.h4,{id:"supergraph",children:"Supergraph"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The supergraph can be generated automatically by registering subgraphs in GraphOS."}),"\n",(0,s.jsx)(r.li,{children:"The supergraph is the result of composing multiple subgraphs together."}),"\n",(0,s.jsx)(r.li,{children:"The supergraph is used by a router to resolve incoming client requests."}),"\n"]}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["We can use the ",(0,s.jsx)(r.code,{children:"rover subgraph publish"})," command from the Rover CLI to publish our subgraph schemas to the Apollo schema registry."]}),"\n",(0,s.jsx)(r.li,{children:"Whenever a new subgraph schema is published, GraphOS composes a new supergraph schema with any subgraphs registered to our supergraph."}),"\n",(0,s.jsx)(r.li,{children:"The supergraph schema consolidates all the types and fields across our published subgraphs. It also includes extra directives to help the router determine which subgraphs can resolve each field."}),"\n"]})}),"\n",(0,s.jsx)(r.h2,{id:"how-the-router-resolves-data",children:"How the Router resolves data"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/07-how-the-router-resolves-data",children:"How the Router resolves data"})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsx)(r.p,{children:"The router uses the supergraph schema to resolve incoming GraphQL operations from the client"})}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Client sends a query"}),"\n",(0,s.jsx)(r.li,{children:"Router checks query against supergraph schema"}),"\n",(0,s.jsxs)(r.li,{children:["Router builds a ",(0,s.jsx)(r.strong,{children:"query plan"}),": a list of smaller GraphQL operations to execute on the subgraphs."]}),"\n"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The query plan also specifies the order in which the subgraph operations need to run."}),"\n",(0,s.jsx)(r.li,{children:"Query plan execution: each subgraph resolve their respective fields by using their resolvers and data sources to retrieve and populate the requested data."}),"\n"]}),"\n",(0,s.jsxs)(r.ol,{start:"4",children:["\n",(0,s.jsx)(r.li,{children:"Subgraphs respond with data and the router combines it all into a single response object"}),"\n",(0,s.jsx)(r.li,{children:"Router collects subgraphs data to build the complete response and sends it back to client"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"router-configuration-and-uplink",children:"Router configuration and Uplink"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/08-router-configuration-and-uplink",children:"Router configuration and Uplink"})}),"\n",(0,s.jsx)(r.h4,{id:"what-information-does-the-query-plan-preview-in-graphos-studio-include",children:"What information does the Query Plan Preview in GraphOS Studio include?"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"It shows how the router will resolve an operation by requesting data from subgraphs."}),"\n"]}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"The GraphOS Router is an executable binary file that can be downloaded and run locally."}),"\n",(0,s.jsx)(r.li,{children:"The Query Plan Preview inspects the GraphQL operation in the Explorer and outputs the query plan the router will execute to resolve the operation."}),"\n"]})}),"\n",(0,s.jsx)(r.h2,{id:"connecting-data-using-entities",children:"Connecting data using entities"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://www.apollographql.com/tutorials/voyage-part1/09-connecting-data-using-entities",children:"Connecting data using entities"})})]})}function d(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>o});var s=n(6540);const i={},a=s.createContext(i);function t(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);