"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[4837],{1348:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>d});var s=r(4848),i=r(8453);const t={sidebar_position:3},a="Arguments",l={id:"tutorial/Arguments",title:"Arguments",description:"Feature Overview",source:"@site/docs/tutorial/Arguments.md",sourceDirName:"tutorial",slug:"/tutorial/Arguments",permalink:"/apollo-graphql-notes/docs/tutorial/Arguments",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/apollo-graphql-notes/docs/tutorial/Arguments.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Resolvers",permalink:"/apollo-graphql-notes/docs/tutorial/Resolvers"},next:{title:"Mutations",permalink:"/apollo-graphql-notes/docs/tutorial/Mutations"}},o={},d=[{value:"Feature Overview",id:"feature-overview",level:2},{value:"Updating our schema",id:"updating-our-schema",level:2},{value:"GraphQL arguments",id:"graphql-arguments",level:2},{value:"Querying for a specific track",id:"querying-for-a-specific-track",level:3},{value:"How to use GraphQL arguments",id:"how-to-use-graphql-arguments",level:3},{value:"Using arguments",id:"using-arguments",level:3},{value:"Resolver args parameter",id:"resolver-args-parameter",level:2},{value:"Updating the <code>RESTDataSource</code>",id:"updating-the-restdatasource",level:3},{value:"Adding a new resolver",id:"adding-a-new-resolver",level:3},{value:"Resolver Chains",id:"resolver-chains",level:2},{value:"Updating the <code>RESTDataSource</code>",id:"updating-the-restdatasource-1",level:3},{value:"Resolver Chains",id:"resolver-chains-1",level:3},{value:"Resolver parameters",id:"resolver-parameters",level:4},{value:"Adding a new resolver to the chain",id:"adding-a-new-resolver-to-the-chain",level:3},{value:"Query building in Apollo Sandbox",id:"query-building-in-apollo-sandbox",level:2},{value:"Variables",id:"variables",level:3},{value:"Exercise",id:"exercise",level:4},{value:"Building the track page",id:"building-the-track-page",level:2},{value:"Query from the client",id:"query-from-the-client",level:4},{value:"The useQuery hook - with Variables",id:"the-usequery-hook---with-variables",level:2},{value:"The <code>useQuery</code> hook",id:"the-usequery-hook",level:4}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"arguments",children:"Arguments"})}),"\n",(0,s.jsx)(n.h2,{id:"feature-overview",children:"Feature Overview"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/01-feature-overview",children:"Feature Overview"})}),"\n",(0,s.jsx)(n.h2,{id:"updating-our-schema",children:"Updating our schema"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/02-updating-our-schema",children:"Updating our schema"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"server/src/schema.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'"A Module is a single unit of teaching. Multiple Modules compose a Track"\ntype Module {\n  id: ID!\n\n  "The Module\'s title"\n  title: String!\n\n  "The Module\'s length in minutes"\n  length: Int\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Why create a separate ",(0,s.jsx)(n.code,{children:"Module"})," type?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A track can contain any number of different modules."}),"\n",(0,s.jsx)(n.li,{children:"A module can belong to more than one track."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'"The track\'s complete array of Modules";\nmodules: [Module!]!;\n'})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"!"})," means not null","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Thus, the array cannot be null"}),"\n",(0,s.jsx)(n.li,{children:"The entries in the array cannot be null."}),"\n"]}),"\n"]}),"\n"]})]}),"\n",(0,s.jsx)(n.h2,{id:"graphql-arguments",children:"GraphQL arguments"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/03-graphql-arguments",children:"GraphQL arguments"})}),"\n",(0,s.jsx)(n.h3,{id:"querying-for-a-specific-track",children:"Querying for a specific track"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can add entry points to the ",(0,s.jsx)(n.code,{children:"Query"})," type in the schema."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-to-use-graphql-arguments",children:"How to use GraphQL arguments"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An argument is a value you provide for a particular field in your query."}),"\n",(0,s.jsx)(n.li,{children:"The schema defines the arguments that each of your fields accepts."}),"\n",(0,s.jsx)(n.li,{children:"Your resolvers can then use a field's provided arguments to help determine how to populate the data for that field."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Arguments can provide a user-submitted search term, help you retrieve specific objects, filter through a set of objects, or even transform the field's returned value."})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A query that performs a search usually provides the user's search term as an argument."}),"\n",(0,s.jsxs)(n.li,{children:["To define an argument for a field in our schema, we add parentheses after the field name.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"missions(to: String, scheduled: Boolean)\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"using-arguments",children:"Using arguments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'"Fetch a specific track, provided a track\'s ID"\ntrack(id: ID!): Track\n'})}),"\n",(0,s.jsx)(n.h2,{id:"resolver-args-parameter",children:"Resolver args parameter"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/04-resolver-args-parameter",children:"Resolver args parameter"})}),"\n",(0,s.jsxs)(n.h3,{id:"updating-the-restdatasource",children:["Updating the ",(0,s.jsx)(n.code,{children:"RESTDataSource"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"server/src/datasources/track-api.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"getTrack(trackId: string) {\n  return this.get<TrackModel>(`track/${trackId}`);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-new-resolver",children:"Adding a new resolver"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"server/src/resolver.ts"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// get a single track by ID, for the track page\ntrack: (_, {id}, {dataSources}) => {\n  return dataSources.trackAPI.getTrack(id);\n},\n"})}),"\n",(0,s.jsx)(n.h2,{id:"resolver-chains",children:"Resolver Chains"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/05-resolver-chains",children:"Resolver Chains"})}),"\n",(0,s.jsxs)(n.h3,{id:"updating-the-restdatasource-1",children:["Updating the ",(0,s.jsx)(n.code,{children:"RESTDataSource"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Why we extracted author-fetching logic to a different resolver?","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"To keep resolvers more resilient to future changes"}),"\n",(0,s.jsx)(n.li,{children:"To prevent unnecessary REST API calls when a query doesn't ask for author data"}),"\n",(0,s.jsx)(n.li,{children:"To keep each resolver lightweight and responsible for specific pieces of data"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"resolver-chains-1",children:"Resolver Chains"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["We can create another resolver function for ",(0,s.jsx)(n.code,{children:"Track.author"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"This resolver is responsible for retrieving author information for a specific track."}),"\n",(0,s.jsx)(n.li,{children:"With that, a resolver chain is formed."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"resolver-parameters",children:"Resolver parameters"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A resolver function populates the data for a field in your schema."}),"\n",(0,s.jsxs)(n.li,{children:["The function has 4 parameters:","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parent"})," contains the returned data of the previous function in the resolver chain."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"args"})," is an object that contains all the arguments provided to the field."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"contextValue"})," is used to access data sources such as a database or REST API."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"info"})," contains informational properties about the operation state."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"adding-a-new-resolver-to-the-chain",children:"Adding a new resolver to the chain"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"modules: ({id}, _, {dataSources}) => {\n  return dataSources.trackAPI.getTrackModules(id);\n},\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Destructure the first parameter to retrieve the ",(0,s.jsx)(n.code,{children:"id"})," property from the parent, that's the ",(0,s.jsx)(n.code,{children:"id"})," of the track."]}),"\n",(0,s.jsxs)(n.li,{children:["We don't need the ",(0,s.jsx)(n.code,{children:"args"})," parameter, so that can be an underscore, and then destructure the third ",(0,s.jsx)(n.code,{children:"contextValue"})," parameter for the ",(0,s.jsx)(n.code,{children:"dataSources"})," property."]}),"\n",(0,s.jsxs)(n.li,{children:["Inside, we can return the results of calling our ",(0,s.jsx)(n.code,{children:"dataSources.trackAPI.getTrackModules"})," method, passing in the ",(0,s.jsx)(n.code,{children:"id"})," for the track."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"query-building-in-apollo-sandbox",children:"Query building in Apollo Sandbox"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/06-query-building-in-apollo-sandbox",children:"Query building in Apollo Sandbox"})}),"\n",(0,s.jsx)(n.h3,{id:"variables",children:"Variables"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"query GetTrack($trackId: ID!) {\n track(id: $trackId) {\n\n }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"$"})," symbol indicates a variable in GraphQL."]}),"\n",(0,s.jsxs)(n.li,{children:["The name after the ",(0,s.jsx)(n.code,{children:"$"})," symbol is the name of our variable, which we can use throughout the query."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Variables are denoted by the ",(0,s.jsx)(n.code,{children:"$"})," symbol."]}),"\n",(0,s.jsx)(n.li,{children:"They are used to provide dynamic values for arguments to avoid including hardcoded values in a query."}),"\n",(0,s.jsx)(n.li,{children:"Each one's type must match the type specified in the schema."}),"\n"]})}),"\n",(0,s.jsx)(n.h4,{id:"exercise",children:"Exercise"}),"\n",(0,s.jsxs)(n.p,{children:["Build a query called ",(0,s.jsx)(n.code,{children:"GetMission"}),".\nThis query uses a variable called ",(0,s.jsx)(n.code,{children:"isScheduled"})," of type nullable ",(0,s.jsx)(n.code,{children:"Boolean"}),".\nIt retrieves a ",(0,s.jsx)(n.code,{children:"mission"})," using the ",(0,s.jsx)(n.code,{children:"scheduled"})," argument set to the ",(0,s.jsx)(n.code,{children:"isScheduled"})," variable.\nIt retrieves the mission's ",(0,s.jsx)(n.code,{children:"id"})," and ",(0,s.jsx)(n.code,{children:"codename"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"query GetMission($isScheduled: Boolean){\n  mission(scheduled: $isScheduled){\n    id\n    codename\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"building-the-track-page",children:"Building the track page"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/07-building-the-track-page",children:"Building the track page"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Operation panel:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"query GetTrack($trackId: ID!) {\n  track(id: $trackId) {\n    id\n    title\n    author {\n      id\n      name\n      photo\n    }\n    thumbnail\n    length\n    modulesCount\n    numberOfViews\n    modules {\n      id\n      title\n      length\n    }\n    description\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["On the client side, the query above will get the value for the ",(0,s.jsx)(n.code,{children:"$trackId"})," variable from the router path or browser URL."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"query-from-the-client",children:"Query from the client"}),"\n",(0,s.jsxs)(n.p,{children:["We wrap the query string in the ",(0,s.jsx)(n.code,{children:"gql"})," function and then send it to the server with the ",(0,s.jsx)(n.code,{children:"useQuery"})," hook."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Example of ",(0,s.jsx)(n.code,{children:"gql"})," function"]}),":"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"export const GET_TRACK = gql(`\n  // our query goes here\n`);\n"})})]}),"\n",(0,s.jsx)(n.h2,{id:"the-usequery-hook---with-variables",children:"The useQuery hook - with Variables"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part3/08-the-usequery-hook-with-variables",children:"The useQuery hook - with Variables"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useQuery"})," Example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'import { gql } from "./__generated__/index";\nimport { useQuery } from "@apollo/client";\n\nconst GET_SPACECAT = gql(`\n    query getSpacecat($spaceCatId: ID!) {\n      spacecat(id: $spaceCatId) {\n        name\n      }\n    }\n  `);\n\nconst spaceCatId = "kitty-1";\n\nconst { loading, error, data } = useQuery(GET_SPACECAT, {\n  variables: { spaceCatId },\n});\n'})}),"\n",(0,s.jsxs)(n.h4,{id:"the-usequery-hook",children:["The ",(0,s.jsx)(n.code,{children:"useQuery"})," hook"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The useQuery hook returns an object with 3 useful properties:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"loading"})," indicates whether the query has completed and results have been returned."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"})," is an object that contains any errors that the operation has thrown."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"data"})," contains the results of the query after it has completed."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["To set variables in our query, we declare them in the second parameter of the ",(0,s.jsx)(n.code,{children:"useQuery"})," hook, inside an options object."]}),"\n"]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);