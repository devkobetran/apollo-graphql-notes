"use strict";(self.webpackChunkelasticstack_notes=self.webpackChunkelasticstack_notes||[]).push([[5372],{673:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=l(4848),r=l(8453);const t={sidebar_position:1},s="Basics",o={id:"tutorial/Basics",title:"Basics",description:"- Refer to Environment Setup for setting up Catstronaut Application.",source:"@site/docs/tutorial/Basics.md",sourceDirName:"tutorial",slug:"/tutorial/Basics",permalink:"/apollo-graphql-notes/docs/tutorial/Basics",draft:!1,unlisted:!1,editUrl:"https://github.com/devkobetran/apollo-graphql-notes/docs/tutorial/Basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial",permalink:"/apollo-graphql-notes/docs/category/tutorial"},next:{title:"Resolvers",permalink:"/apollo-graphql-notes/docs/tutorial/Resolvers"}},a={},c=[{value:"Feature Data Requirements",id:"feature-data-requirements",level:2},{value:"The Graph",id:"the-graph",level:3},{value:"Schema Definition Language (SDL)",id:"schema-definition-language-sdl",level:2},{value:"The GraphQL Schema",id:"the-graphql-schema",level:3},{value:"Descriptions",id:"descriptions",level:4},{value:"Building our Schema",id:"building-our-schema",level:2},{value:"type definitions",id:"type-definitions",level:4},{value:"Defining <code>Track</code> type",id:"defining-track-type",level:3},{value:"Defining <code>Author</code> type",id:"defining-author-type",level:3},{value:"Defining <code>Query</code> type",id:"defining-query-type",level:3},{value:"Apollo Server",id:"apollo-server",level:2},{value:"Backend first steps",id:"backend-first-steps",level:3},{value:"Mocking data",id:"mocking-data",level:3},{value:"Apollo Explorer",id:"apollo-explorer",level:2},{value:"The frontend app",id:"the-frontend-app",level:2},{value:"Apollo Client Setup",id:"apollo-client-setup",level:2},{value:"The <code>ApolloClient</code> class",id:"the-apolloclient-class",level:3},{value:"The <code>ApolloProvider</code> component",id:"the-apolloprovider-component",level:3},{value:"Codegen",id:"codegen",level:2},{value:"Process",id:"process",level:3},{value:"Defining a Query",id:"defining-a-query",level:2},{value:"The useQuery Hook",id:"the-usequery-hook",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basics",children:"Basics"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Refer to Environment Setup for setting up Catstronaut Application."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"feature-data-requirements",children:"Feature Data Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["There will be track cards to build out that contain these information:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Title"}),"\n",(0,i.jsx)(n.li,{children:"Thumbnail image"}),"\n",(0,i.jsx)(n.li,{children:"Length (estimated duration)"}),"\n",(0,i.jsx)(n.li,{children:"Module count"}),"\n",(0,i.jsx)(n.li,{children:"Author name"}),"\n",(0,i.jsx)(n.li,{children:"Author picture"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"the-graph",children:"The Graph"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Think of the app data as a collection of objects (such as learning tracks and authors) and relationships between objects (such as each learning track having an author)."}),"\n",(0,i.jsx)(n.li,{children:"If we think of each object as a node and each relationship as an edge between two nodes, we can think of our entire data model as a graph of nodes and edges. This is called our application's graph."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"schema-definition-language-sdl",children:"Schema Definition Language (SDL)"}),"\n",(0,i.jsx)(n.h3,{id:"the-graphql-schema",children:"The GraphQL Schema"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.strong,{children:"schema"})," is like a contract between the server and the client.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It defines what a GraphQL API can and can't do, and how clients can request or change data."}),"\n",(0,i.jsx)(n.li,{children:"It's an abstraction layer that provides flexibility to consumers while hiding backend implementation details."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["GraphQL's Schema Definition Language (SDL):","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A schema is a collection of ",(0,i.jsx)(n.strong,{children:"object types"})," that contain ",(0,i.jsx)(n.strong,{children:"fields"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Each field has a type of its own (e.g. ",(0,i.jsx)(n.strong,{children:"scalar"})," such as ",(0,i.jsx)(n.code,{children:"Int"})," or ",(0,i.jsx)(n.code,{children:"String"})," or another object type)"]}),"\n",(0,i.jsxs)(n.li,{children:["Declare a type using the ",(0,i.jsx)(n.code,{children:"type"})," keyword, followed by the name in PascalCase.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"e.g."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:"type SpaceCat {\n    # Fields go here\n}\n"})}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Fields are declared by their name (camelCase), a colon, and then the type."}),"\n",(0,i.jsx)(n.li,{children:"A field can also contain a list, indicated by square brackets."}),"\n",(0,i.jsx)(n.li,{children:"Fields are not seperated by commas"}),"\n",(0,i.jsxs)(n.li,{children:["Can indicate whether each field value is nullable or non-nullable","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If a field should never be null, we add an exclamation mark after its type."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'type SpaceCat {\n    "name is not null"\n    name: String!\n    age: Int\n    missions: [Mission]\n}\n'})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"descriptions",children:"Descriptions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It's good practice to document your schema, in the same way that it's helpful to comment your code."}),"\n",(0,i.jsx)(n.li,{children:"It makes it easier for your teammates (and future you) to make sense of what's going on."}),"\n",(0,i.jsx)(n.li,{children:"The SDL lets you add descriptions to both types and fields by writing strings (in quotation marks) directly above them."}),"\n",(0,i.jsx)(n.li,{children:'Triple "double quotes" allow you to add line breaks for clearer formatting of lengthier comments.'}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'"""\nI\'m a block description\nwith a line break\n"""\n'})}),"\n",(0,i.jsx)(n.h2,{id:"building-our-schema",children:"Building our Schema"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Follow this tutorial: ",(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/04-building-our-schema",children:"https://www.apollographql.com/tutorials/lift-off-part1/04-building-our-schema"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Navigate to the ",(0,i.jsx)(n.code,{children:"server/src/"})," directory"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Then, create a new ",(0,i.jsx)(n.strong,{children:"schema.ts"})," file"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["To get started with our schema, we'll need a couple packages first: ",(0,i.jsx)(n.code,{children:"@apollo/server"}),", ",(0,i.jsx)(n.code,{children:"graphql"})," and ",(0,i.jsx)(n.code,{children:"graphql-tag"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"@apollo/server"})," package provides a full-fledged, spec-compliant GraphQL server."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"graphql"})," package provides the core logic for parsing and validating GraphQL queries."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"graphql-tag"})," package provides the ",(0,i.jsx)(n.code,{children:"gql"})," template literal that we'll use in a moment."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'import gql from "graphql-tag";\n'})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"gql"})," is a a tagged template literal, used for wrapping GraphQL strings like the schema definition we're about to write."]}),(0,i.jsx)(n.p,{children:"This converts GraphQL strings into the format that Apollo libraries expect when working with operations and schemas, and it also enables syntax highlighting."})]}),"\n",(0,i.jsx)(n.h4,{id:"type-definitions",children:"type definitions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"export const typeDefs = gql`\n  # Schema definitions go here\n`;\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"defining-track-type",children:["Defining ",(0,i.jsx)(n.code,{children:"Track"})," type"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'"A track is a group of Modules that teaches about a specific topic"\ntype Track {\n  id: ID!\n  title: String!\n  author: Author!\n  thumbnail: String\n  length: Int\n  modulesCount: Int\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"defining-author-type",children:["Defining ",(0,i.jsx)(n.code,{children:"Author"})," type"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'"Author of a complete Track or a Module"\ntype Author {\n  id: ID!\n  name: String!\n  photo: String\n}\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"defining-query-type",children:["Defining ",(0,i.jsx)(n.code,{children:"Query"})," type"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The fields of this type are entry points into the rest of our schema."}),"\n",(0,i.jsx)(n.li,{children:"These are the top-level fields that our client can query for."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-SQL",children:'type Query {\n  "Get tracks array for homepage grid"\n  tracksForHome: [Track!]!\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"server/src/schema.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import gql from "graphql-tag";\n\nexport const typeDefs = gql`\n  type Query {\n    "Get tracks array for homepage grid"\n    tracksForHome: [Track!]!\n  }\n\n  "A track is a group of Modules that teaches about a specific topic"\n  type Track {\n    id: ID!\n    "The track\'s title"\n    title: String!\n    "The track\'s main author"\n    author: Author!\n    "The track\'s main illustration to display in track card or track page detail"\n    thumbnail: String\n    "The track\'s approximate length to complete, in minutes"\n    length: Int\n    "The number of modules this track contains"\n    modulesCount: Int\n  }\n\n  "Author of a complete Track"\n  type Author {\n    id: ID!\n    "Author\'s first and last name"\n    name: String!\n    "Author\'s profile picture url"\n    photo: String\n  }\n`;\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apollo-server",children:"Apollo Server"}),"\n",(0,i.jsxs)(n.p,{children:["Link to tutorial: ",(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/05-apollo-server",children:"https://www.apollographql.com/tutorials/lift-off-part1/05-apollo-server"})]}),"\n",(0,i.jsx)(n.h3,{id:"backend-first-steps",children:"Backend first steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"1st goal is to create a GraphQL server that can:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Receive an incoming GraphQL query from our client"}),"\n",(0,i.jsx)(n.li,{children:"Validate that query against our newly created schema"}),"\n",(0,i.jsx)(n.li,{children:"Populate the queried schema fields with mocked data"}),"\n",(0,i.jsx)(n.li,{children:"Return the populated fields as a response"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The Apollo Server library helps us implement this server quickly, painlessly, and in a production-ready way."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In the ",(0,i.jsx)(n.code,{children:"server/src/"})," folder, open ",(0,i.jsx)(n.code,{children:"index.ts"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { ApolloServer } from "@apollo/server";\nimport { startStandaloneServer } from "@apollo/server/standalone";\nimport { typeDefs } from "./schema";\n\nasync function startApolloServer() {\n  const server = new ApolloServer({ typeDefs });\n  const { url } = await startStandaloneServer(server);\n  console.log(`\n  \ud83d\ude80  Server is running!\n  \ud83d\udced  Query at ${url}\n`);\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"mocking-data",children:"Mocking data"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can configure custom mocked responsed for every schema field."}),"\n",(0,i.jsx)(n.li,{children:"You can enable default mocked responses for every schema field."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { addMocksToSchema } from "@graphql-tools/mock";\nimport { makeExecutableSchema } from "@graphql-tools/schema";\n\nconst server = new ApolloServer({\n  schema: addMocksToSchema({\n    schema: makeExecutableSchema({ typeDefs }),\n    mocks,\n  }),\n});\n\nconst mocks = {\n  Track: () => ({\n    id: () => "track_01",\n    title: () => "Astro Kitty, Space Explorer",\n    author: () => {\n      return {\n        name: "Grumpy Cat",\n        photo:\n          "https://res.cloudinary.com/dety84pbu/image/upload/v1606816219/kitty-veyron-sm_mctf3c.jpg",\n      };\n    },\n    thumbnail: () =>\n      "https://res.cloudinary.com/dety84pbu/image/upload/v1598465568/nebula_cat_djkt9r.jpg",\n    length: () => 1210,\n    modulesCount: () => 6,\n  }),\n};\n'})}),"\n",(0,i.jsx)(n.h2,{id:"apollo-explorer",children:"Apollo Explorer"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/06-apollo-explorer",children:"Apollo Explorer Tutorial"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Benefits of using the GraphOS Studio Explorer"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You can build and iterate on queries faster."}),"\n",(0,i.jsx)(n.li,{children:"You can step through your schema to discover available types and fields."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-frontend-app",children:"The frontend app"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/07-the-frontend-app",children:"The Frontend app Tutorial"})}),"\n",(0,i.jsx)(n.h2,{id:"apollo-client-setup",children:"Apollo Client Setup"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/08-apollo-client-setup",children:"Apollo Client Setup"})}),"\n",(0,i.jsxs)(n.h3,{id:"the-apolloclient-class",children:["The ",(0,i.jsx)(n.code,{children:"ApolloClient"})," class"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Every instance of ",(0,i.jsx)(n.code,{children:"ApolloClient"})," uses an in-memory cache.","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"This enables it to store and reuse query results so it doesn't have to make as many network requests."}),"\n",(0,i.jsx)(n.li,{children:"This makes our app's user experience feel much snappier."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const client = new ApolloClient({\n  uri: "http://localhost:4000",\n  cache: new InMemoryCache(),\n});\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"the-apolloprovider-component",children:["The ",(0,i.jsx)(n.code,{children:"ApolloProvider"})," component"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"ApolloProvider"})," component uses React's Context API to make a configured Apollo Client instance available throughout a React component tree."]}),"\n",(0,i.jsxs)(n.li,{children:["Wrap our React components tree in the ",(0,i.jsx)(n.code,{children:"ApolloProvider"})," component to make Apollo Client available to our app's Reacts components."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"root.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <GlobalStyles />\n      <Pages />\n    </ApolloProvider>\n  </React.StrictMode>\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"codegen",children:"Codegen"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/09-codegen",children:"Codegen Tutorial"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:['Look to GraphQL API\'s schema as the "single source of truth" for all of the types we could possibly query on the frontend.',"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"To achieve this and to keep our frontend's type definitions consistent with the backend, is to use a GraphQL Code Generator."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"@graphql-codegen/cli"})," is one such tool that can read in a GraphQL schema, compare it against the queries we're asking our frontend code to run, and generate all of the types that we'll need to use on the frontend."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"process",children:"Process"}),"\n",(0,i.jsx)(n.p,{children:"Check the tutorial."}),"\n",(0,i.jsx)(n.h2,{id:"defining-a-query",children:"Defining a Query"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/09-defining-a-query",children:"Defining a Query Tutorial"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Best Practices when creating client queries:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Test out queries in the GraphOS Studio Explorer and copy them over."}),"\n",(0,i.jsx)(n.li,{children:"Assign each query string to a constant with an ALL_CAPS name."}),"\n",(0,i.jsx)(n.li,{children:"Include only the fields that the client requires."}),"\n",(0,i.jsxs)(n.li,{children:["Wrap each query in the ",(0,i.jsx)(n.code,{children:"gql"})," function."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"the-usequery-hook",children:"The useQuery Hook"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.apollographql.com/tutorials/lift-off-part1/10-the-usequery-hook",children:"The useQuery hook tutorial"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A ",(0,i.jsx)(n.code,{children:"useQuery"})," hook is used to execute queries in the frontend app."]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>o});var i=l(6540);const r={},t=i.createContext(r);function s(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);